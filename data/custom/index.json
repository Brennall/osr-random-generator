appdata = (typeof appdata == "undefined") ? {} : appdata;

/*

Important:

	-Put all data strings in double quotes.
	-Use a forward slash before double quotes inside any double quotes:
		- Constantly says "Umm"
		- "Constantly says \"Umm\""
	-Use commas to separate items in a list, but DO NOT put a comma after the last item in a list (really that will only break IE)
	- a [] represents a list of items that are ordered by number
	- a {} represents on object of attribute: value parts
	
*/

/*

//////////////////////////////////////////////////////////////////
// NPCs
//////////////////////////////////////////////////////////////////

Data that can be customized:
	-personality
		-a list of strings
	-appearance
		-a list of strings
	-name
		-an object containing a list of strings for "male", "female", and "surname"

See examples.


EXAMPLE: Add Appearance list

//push an option to the appearance data this lets the app know your custom data exists and what to call it.
appdata.appearance.options.push({ option: "weird", label: "Weird Traits" });
//set the data using the "option" value above, this is the data itself.
appdata.appearance.testing = [
		"Devil horns",
		"Blue skin",
		"Hooved feet",
		"Third eye",
		"Webbed fingers/toes",
		"Vaguely fish-like"
	];
	
*/
	
/*

EXAMPLE: Add Personality list

appdata.personality.options.push({ option: "weird", label: "Weird Traits"});
appdata.personality.weird = [
	"Superstitious",
	"Throws salt over shoulder at mention of ___",
	"Talks in rhyme",
	"Schizophrenic",
	"Thinks s/he is possessed, incorrectly",
	"Thinks s/he is possessed, correctly",
];

*/


/*

EXAMPLE: Add Names list

appdata.name.options.push({ option: "japanese", label: "Japanese (ish)"});
appdata.name.japanese = {
	"male": [
		"Kazuo",
		"Ryuichi",
		"Ryu",
		"Kenzo",
		"Masamune",
		"Akira"
	],
	"female": [
		"Yukiko",
		"Natsume",
		"Kai",
		"Kiriko",
		"Mari"
	],
	"surname": [
		"Kurosawa",
		"Ono",
		"Otomo",
		"Oe",
		"Kawabata"
	]
};



//////////////////////////////////////////////////////////////////
// WILDERNESS
//////////////////////////////////////////////////////////////////

Data is organized as

appdata.wilderness.terrain - an array of terrain objects
add



*/


appdata.tables.belfel = {
	"title": "Castle of Fen-Bel wandering monsters",
	"tables": {
		"check": [
			{ "label": "None", "weight": 4 },
			{ "label": "Encounter", "weight": 2, "print": false, "subtable": "monster" },
		],
		"monster": [
			{ "label": "Rackham", "desc": "Wandered off from #2", "weight": 1 },
			
			{ "label": "Pirates (1-2)", "desc": "Wandered or set off from the group, looking for loot, if they detect the party first, they will go for reinforcements or if cornered hide and try to surprise then run for it", "weight": 9 },
			{ "label": "Tiny zombie creature (crab, lobster, lamprey)", "desc": "Harmless except it will alert its master to the party's location", "weight": 16 },
			{ "label": "Sahuagin zombie", "desc": "They have clearly been \"killed\" before, some may be missing an arm, or have large wounds, missing facial features, etc. If they have met the pirates they may be missing a leg, crawling on the ground.", "weight": 9 },
			{ "label": "Giant crab", "desc": "non-zombie, but will become one if it dies) snuck in before the castle rose and then got trapped. Wandered off from the Kitchen (#3)", "weight": 1 },
		]
		
	}
	
	
}